version: '3.1'

services:
  bestiller-backend:
    build:
      context: .
      args:
        APPNAME: hops-bestiller-backend
    ports:
      - "8001:2022"
    environment:
      DB_HOST: pg
      KAFKA_BROKERS: kafka:9093
      REDIS_HOST: redis
    env_file:
      - .env
    depends_on:
      - mock-oauth2-server
      - pg
      - kafka

  bestiller-frontend:
    build:
      context: .
      args:
        APPNAME: hops-bestiller-frontend
    ports:
      - "8002:2022"
    depends_on:
      - 'bestiller-backend'

  sof-questionnaire:
    build:
      context: .
      args:
        APPNAME: sof-questionnaire
    ports:
      - "8003:2022"

  sof-resource-puller:
    build:
      context: .
      args:
        APPNAME: sof-resource-puller
    ports:
      - "8004:2022"
    depends_on:
      - 'redis'
    environment:
      KAFKA_BROKERS: kafka:9093
      REDIS_HOST: redis

  behandler-backend:
    build:
      context: .
      args:
        APPNAME: hops-behandler-backend
    ports:
      - "8005:2022"
    depends_on:
      - 'redis'
    environment:
      KAFKA_BROKERS: kafka:9093
      REDIS_HOST: redis
    env_file:
      - .local.env
  # Support

  mock-oauth2-server:
    image: ghcr.io/navikt/mock-oauth2-server:0.3.6
    ports:
      - "8030:8030"
    environment:
      - SERVER_PORT=8030
    hostname: host.docker.internal

  pg:
    image: postgres
    restart: always
    ports:
      - ${DB_PORT}:${DB_PORT}
    expose:
      - ${DB_PORT}
    environment:
      POSTGRES_USER: ${DB_USERNAME}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_DATABASE}
    command: -p ${DB_PORT}

  hapi:
    image: hapiproject/hapi:latest-distroless
    ports:
      - "${FHIR_SERVER_PORT}:8080"
    environment:
      hapi.fhir.server_address: http://host.docker.internal:${FHIR_SERVER_PORT}/fhir

  smart-launcher:
    image: smartonfhir/smart-launcher
    ports:
      - "8099:80"
    environment:
      FHIR_SERVER_R4: http://host.docker.internal:${FHIR_SERVER_PORT}/fhir
      FHIR_SERVER_R4_INTERNAL: http://hapi:${FHIR_SERVER_PORT}/fhir

  redis:
    image: redis
    ports:
      - '6379:6379'

  zookeeper:
    image: "zookeeper"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://zookeeper:2181"]
      interval: 30s
      timeout: 10s
      retries: 5

  kafka:
    image: "wurstmeister/kafka"
    ports:
      - "19092:19092"
    depends_on:
      - zookeeper
    restart: on-failure
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: INSIDE://kafka:9093,OUTSIDE://localhost:19092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INSIDE:PLAINTEXT,OUTSIDE:PLAINTEXT
      KAFKA_LISTENERS: INSIDE://:9093,OUTSIDE://:19092
      KAFKA_INTER_BROKER_LISTENER_NAME: INSIDE
      KAFKA_CREATE_TOPICS: '${KAFKA_TOPIC_OUTGOING}:1:1,${KAFKA_TOPIC_INCOMING}:1:1'
